#=======================================================================
echo ctl
cat > prog <<"ENDOF prog"
#!/bin/csh -f
# ======================================================================
   if($#argv != 2) then
echo "Usage: {ctl} o/{fiting-out}.s {ezd-map}" ; exit
   endif
   if(! -e o/${1}.s) then
echo "No fiting output with this name = o/${1}.s" ; exit
   endif
   if(! -e d/emap.d) then
echo "NEED d/emap.d LINK" ; exit
   endif
   if(! -e sym) then
echo "NEED sym file" ; exit
   endif
set SYM=sym
set MAP=${2}
set symlist="symlist"
echo -n >! ${symlist}
set num=`wc $SYM` ; set num=$num[1]
set n="1"
   while ($n <= $num)
echo $n >> ${symlist}
set n=`expr $n + 1`
   end
#****************** needs MODlist **************************************
   if(! -e modlist) then
echo "NEED modlist FILE" ; exit
   endif
grep "\#" modlist | sed -e "s/#//" >! LisT
cat >! LisT1 <<"EOF"
{
  # construct a string of fields from $2 to $(NF)
  fields = " ";
  for(i=2; i<=NF; i++) fields = sprintf("%s%3s", fields, $i);  #
  if($1 in table)  table[$1] = sprintf("%s%s", table[$1], fields);
  else  table[$1] = $0;
}
END { for(i in table)  printf("%s\n", table[i]); }
"EOF"
awk -f LisT1 LisT >! listmod
rm -rf LisT LisT1
# ======================================================================
# generates symmetry operations to apply to the independent molecules in
# the working cell. transforms symmetry operations into fractional and
# subtracts the origin.
echo `grep "CELL" d/data.d` `head -20 ${MAP} | egrep -e "ORIGIN|EXTENT"` >! LisT
cat >! LisT1 <<"EOF"
{ printf "A=%8.3f;B=%8.3f;C=%8.3f;TX=%3d/%-3d;TY=%3d/%-3d;TZ=%3d/%-3d\n",\
 $1,$2,$3,$9,$13,$10,$14,$11,$15 }
"EOF"
awk -f LisT1 LisT |sed -e "s/\//\\\//g" >! LisT2
set line=`cat LisT2`
rm -f LisT LisT1 LisT2
echo -n >! LisT1
set num="0"
   foreach sym (`cat ${symlist}`)
egrep -e "#${sym}"$ $SYM >> LisT1
set num=`expr ${num} + 1`
   end
sed -e "/LINE/s/LINE/${line}/" <<"EOF" |sed -e "/NUMB/s/NUMB/${num}/" >! LisT2
BEGIN { LINE ; printf "ncs %5d\n",NUMB }
{ printf " %8.2f%8.2f%8.2f%10.5f%10.5f%10.5f      %s\n", \
       $1,$2,$3,$4/A-TX,$5/B-TY,$6/C-TZ,$7 }
"EOF"
awk -f LisT2 LisT1 >! LisT
rm -f LisT1 LisT2
# ======================================================================
source $VEDA/$VEDA_BIN/entorno
ln -s $cwd/d/data.d $UROF/fort.8
ln -s $cwd/o/${1}.s $UROF/fort.1
$VEDA/$VEDA_BIN/ncsctl.exe < LisT >! LisT1
sed -e "s/^[ ]*[0-9]*//" listmod | wc -w >! LisT2
cat >! prg.f <<"ENDOF prg.f"
      program ctl
      implicit none
      integer count,nsym,num
      character flag*1
      logical logic
      dimension count(500)
      open(unit=10,file='LisT1',status='old')
       do nsym=1,500
      count(nsym)=0
       enddo
      logic=.true.
       do while (logic)
      read(10,'(54x,i5,2x,a)',end=100) nsym,flag
         if(flag .ne. '*') then
      count(nsym)=count(nsym)+1
         endif
       enddo
100   open(unit=11,file='LisT2',status='old')
      read(11,*) num
      open(unit=20,file='gen.symlist',status='unknown')
       do nsym=1,500
         if(count(nsym).eq.num) then
      write(20,'(i5)') nsym
         endif
       enddo
      stop
      end
"ENDOF prg.f"
$VEDA_COMPILE prg.f -o prg.exe
./prg.exe
rm -rf prg.f prg.exe ${symlist} listmod LisT LisT1 LisT2 $UROF
paste -s -d ' ' gen.symlist | sed -e 's/[ ]\+/ /g' > ${symlist}
rm -f gen.symlist
exit
"ENDOF prog"
#=======================================================================
cat > prg.for <<"ENDOF prg.for"
c ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      program ncsctl
c written by Javier y Carmen
      implicit none
      integer bod,i,i1,id,iecr,ilec,ind,iout,it,j,kprt,m,n,ncs,nmol,
     & nort,nsol,sym
      real a,al,alpha,b,be,beta,c,dtor,ga,gamma,pi,rbid1,rf,rncs,ro,
     & rtod,rx,rxn,tncs,twopi,tx,txn
      double precision dang
      character card*80,forme*40,formr*40,zn*1
      logical out
      dimension rncs(9,1000),rx(3,3),rxn(3,3),sym(1000),tncs(3,1000),
     & tx(3),txn(3)
      common/ioprg/ ilec,iecr,kprt,iout,formr,forme,zn
      common/cell/ a,b,c,alpha,beta,gamma,rbid1(16)
      common/ortm/ ro(3,3),rf(3,3),nort
      common/angkte/ pi,twopi,dtor,rtod
      dang=atan2(1.d0,1.d0)
      pi=dang*4.d0
      twopi=dang*8.d0
      dtor=dang/45.d0
      rtod=45.d0/dang
      ilec=5
      iecr=6
      kprt=0
      iout=9
      zn='#'
      formr='(2x,i2,       3f7.1,3f8.4,  1x,4f6.1   )'
      forme='(1x,a1,i2,    3f7.1,3f8.4,  7x,i3,2x,a1)'
      id=8
      call abra(id,'f','u',0)
      rewind(unit=id)
      read(id,*)
      read(id,*) a,b,c,alpha,beta,gamma
      call celda
      it=ilec
      ilec=id
      call lecsim
      ilec=it
      read(id,*) nort
      call ortho
      read(ilec,'(a)') card
c lectura interna
      read(card(4:80),*) ncs
       do n=1,ncs
      read(ilec,'(a)') card
      ind=index(card,'#')
      card(ind:ind)=' '
      ind=index(card,'#')
      card(ind:ind)=' '
c lectura interna
      read(card,*) al,be,ga,(tncs(i,n),i=1,3),sym(n)
      call rmxe(al,be,ga,rncs(1,n))
       enddo
      i1=1
      call abra(i1,'f','u',0)
      rewind(unit=i1)
10    read(i1,'(a)',end=20) card
      read(i1,*) nmol,nsol
       do m=1,nmol+nsol-1
      read(i1,fmt=formr) bod,al,be,ga,tx
      call rmxe(al,be,ga,rx)
        do n=1,ncs
      call pro2mx(rxn,rncs(1,n),rx)
      call rmx2e(rxn,al,be,ga)
      call pro3mx(rxn,rf,rncs(1,n),ro)
      out=.false.
         do i=1,3
      txn(i)=0.
          do j=1,3
      txn(i)=txn(i)+rxn(i,j)*tx(j)
          enddo
      txn(i)=txn(i)+tncs(i,n)
      if(txn(i).le.0.0.or.txn(i).ge.1.0) out=.true.
         enddo
         if(out) then
      write(iecr,fmt=forme) zn,bod,al,be,ga,txn,sym(n),'*'
         else
      write(iecr,fmt=forme) zn,bod,al,be,ga,txn,sym(n)
         endif
        enddo
       enddo
      go to 10
20    stop
      end
"ENDOF prg.for"
#=======================================================================
chmod u+x prog ; mv prog $VEDA/$VEDA_BIN/ctl
$VEDA_COMPILE prg.for $VEDA/$VEDA_BIN/esclave.a -o $VEDA/$VEDA_BIN/ncsctl.exe
rm -f prg.for
exit
